★☆★☆★☆ 2021. 10. 29. ★☆★☆★☆
● Database : 데이터 베이스[표(테이블) 만들기]
● 서버 : 데이터를 가지고 있는 컴퓨터
● DB[데이터 테이블] ← DBMS[DB관리시스템] → DBA[DB관리자]
				MYSQL
● 설치 : 
	1. MySQL Installer for Windows[MySql 서버와 관련 소프트웨어 제공]
	- Windows (x86, 32-bit), MSI Installer	8.0.27	470.0M
	- No thanks, just start my download.
	
	2. Connector/J[MySql과 Java 연결해주는 라이브러리]
	- Platform Independent (Architecture Independent), ZIP Archive	8.0.27	4.8M
	- No thanks, just start my download.
	
● port Number : 3307, Pw : 1234

● DB - Java 연동

● 주요 인터페이스
1. Connection DB 연결 인터페이스
			- DriverManager SQL 연결 조작 인터페이스
2. PrepareStatement SQL 연결 인터페이스
	- ?에 데이터 넣기
	- preparedStatement.executeQuery() : Select
	- preparedStatement.executeUpdate(); : insert, update, delete
3. ResultSet SQL 결과(처리) 인터페이스
			.next : 쿼리 결과의 다음 레코드 가져오기
			.get자료형(String) : 현재 레코드의 필드 가져오기
			
★☆★☆★☆ 2021. 11. 01, 03 ★☆★☆★☆
● JDVC

● Database
	데이터 집합 → 테이블 관리
				// 표 만들기 같은것
● 용어
표 = table
세로(열) = 필드, 속성, 컬럼(Column)
가로(행) = 레코드, 튜플, 로우(raw)

create table javafx.board( 
    b_no int auto_increment primary key ,
    b_title varchar(100) not null ,
    b_contents varchar(5000) not null ,
    b_write varchar(15) not null ,
    b_date timestamp default now() ,
    b_view int default 0
)

● 자료형
1. int : 정수형[4바이트]
2. varchar : 문자형[가변길이]
	// 자동으로 메모리 관리를 해줌 / 작은 데이터를 저장할때 필요한 만큼 사용
3. timestamp : 날짜/시간

● 속성
1. primary key : 기본키
	- 식별용 필드[중복값 X, Null X] : 주민등록번호, 사번, 학번, 제품코드 등
2. foreign key : 외래키[다른테이블에서 기본키와 연결된 키]
 	- 중복값 O, Null X, 기본기 없는 필드 X(무결성 유지)
 									// 어긋난 것이 없음
3. auto_increment : 자동번호 주입
4. not null : null값 제외[null일경우 오류발생]
5. default : 자동 초기값 주입

● 정수
1. now() : 시스템 날짜/시간 함수

● SQL : 데이터 베이스 관리 언어
		// 암기 문법이 생김
		
/* 암기 시작
● DDL(데이터 베이스 정의어)
	create : 생성
		DB : create database db명 // ex) create datavase test
		Table : create table db명.테이블명(
				필드명 자료형 속성, 필드명2 자료형 속성)
	drop : 삭제
		
	alter : 수정
		

● DML(조작어)
	1. 삽입 : insert info 테이블명(필드1, 필드2) values(값1, 값2)
			- 모든 필드 삽입 : insert into 테이블 명 values(값1, 값2, 값3)
			- 모든 필드 삽입 시 : 필드명 생략
	2. 검색 : select 필드명 from 테이블명 where 조건
			- 모든 필드 검색 : select*from 테이블 명 where 조건
			- 모든 필드 검색 시 : *(와일드 카드)
	3. 삭제 : delete 테이블명 
			
	4. 수정(업데이트) : update 테이블명 set 변경필드 = 값, 변경필드2 = 값2 where 조건
	키워드
	1. where : 조건
		- and : 이면서, 면서, 이고, 모두, 그리고
		- or : 이거나, 거나, 하나라도
	2. oder by : 정렬
		- oder by 필드명 asc : 해당 필드 오름차순[기본값]
		- oder by 필드명 desc : 해당 필드 내림차순
		
● DCL(제어어)

*/ 암기 끝

● CRUD[생성, 로드(읽기), 수정, 삭제]
● MVC[Model(클래스, 도메인 → DB), View(FXML), Controller]
	1. Model : 데이터/DB 데이터 ←
	2. View : 프론트엔드[씬빌더(fxml), html]
	3. Controller : java 파일(클래스)
		삽입 : View → dto → Controller → dto → Model → dto → DB
		조회 : View ← dto ← Controller ← dto ← Model ← dto ← DB
		
	MVC
	View : 입력받음 fxml
	Controller : 컨트롤에서 입력받은 값을 객체화
		- 객체화 : 캡슐화
	Model : 클래스[객체]
	 		DB처리[CRUD] // 파일처리
	 		결과
	 		
프론트엔드
Controller
백엔드
DB
		
● DTO : 데이터 이동 객체[Data Transfer Object]

● DAO : 데이터 베이스 기능 조작 객체[Data Access Object]

★☆★☆★☆ 2021. 11. 03 ★☆★☆★☆
							테이블 뷰

● ObservableList : javafx 사용하는 컬렉션프레임워크
1. 테이블에 리스트 세팅 : Tableview에 리스트를 넣을때 setItems(ObservableList)
2. 테이블 필드에 리스트 내 객체 세팅
	1. 테이블 내 플드 가져오기
		TableColumn 열이름 = 테이블뷰이름.getColumns().get(열번호);
	2. 해당 열에 객체값 넣기
		열이름.setCellValueFactory(new PropertyValueFactory<>("필드명"));
		주의) 리스트 내 연결된 클래스 내 필드와 필드명과 동일
		
테이블 뷰 클릭한 아이템[객체]
	1. 테이블뷰이름.getSelectionModel().getSelectedItem();
	 - 테이블 뷰에서 클릭한 모델의 아이템을 빼옴[객체]
	 
● 화면전환
1. 로드페이지 메소드
public void loadpage(String page) {
	try {
	  Parent patent = FXMLLoader.load(getClass().getResource("/fxml/"+page+".fxml"));
	  mainpageboardpane.setCenter(patent);
	  }catch (Exception e) { }
}
2. 다른 페이지에서 로드 페이지 메소드 호출
	1. 현재 클래스를 객체화
	public static MainpageController instance; // 변수선언
	    public MainpageController() {// 생성자
	    	instance = this; // this : 현 클래스의 전체 메모리
	    }
	    public static MainpageController getinstance()  {// 인스턴스변환 메소드
	    	return instance;
	    }
	    
	 2. 다른 페이지에서 메소드 호출
		1.  MainpageController.getinstance().loadpage("fxml 이름");
		2. 
● SQL
데이터 속성
create table javafx.board( 
    b_no int auto_increment primary key ,
    b_title varchar(100) not null ,
    b_contents varchar(5000) not null ,
    b_write varchar(15) not null ,
    b_date timestamp default now() ,
    b_view int default 0
)

Reply
create table javafx.reply(
   r_no int auto_increment primary key ,
   r_contents varchar(100) not null , 
    r_write varchar(15) not null ,
    r_date timestamp default now() ,
    b_no int not null  ,
    foreign key( b_no ) references board(b_no)on delete cascade
    ) // 현제 필드를 누구에게 외래키로 연결할껀지
// DB목적 : 통합하기 위해서 / 대규모가 생겼을때 사용

● PK, FK
고객 테이블 	고객번호PK
주문 테이블 	주문번호PK 		고객번호FK 	인사번호FK
운송 테이블 	운송PK 			주문번호FK
직원 테이블 	인사번호PK		
주문항목 테이블 	주문번호FK 제품번호FK
제품 테이블 	제품번호PK
-------------------------------------------------
회원 테이블 		회원번호PK 	회원 아이디
게시물 테이블 		게시물번호PK 	회원 아이디
댓글 테이블 		댓글번호PK 	게시물번호FK
제품 테이블 		제품번호PK 	회원번호PK
제품 리뷰 테이블 	제품리뷰PK 	제품번호FK 	회원번호FK

PK : 식별용[중복X]
FK : PK와 연결된 필드[중복O]

★☆★☆★☆ 2021. 11. 05. ★☆★☆★☆
● 메소드 호출하는 방법
1. Controller 인스턴스 [다른 컨트롤러에서 동일한 Boarpane 사용]
	- new를 이용한 객체생성 X
public static MainpageController instance; // 변수선언
	public MainpageController() {
		instance = this; // 현재 클래스의 메모리를 변수에 할당
		}
	public static MainpageController getinstance() { // 변수 호출 메소드
		return instance;
}
	MainpageController.getinstance().loadpage("productregister"); // 페이지 전환

2. Dao 인스턴스 [해당 인스턴스 생성시 DB와 연결된 인스턴스 사용]
public static ProductDao productDao = new ProductDao();

public ProductDao() {
try {
	Class.forName("com.mysql.cj.jdbc.Driver");
	connection = DriverManager.getConnection("jdbc:mysql://localhost:3307/javafx?severTimezome=UTC", "root", "1234");
	} catch (Exception e) { }
}
public static MemberDao getMemberDao() {return memberDao;}

3. new 객체를 통한 메소드 접근
클래스명.메소드명 = new 클래스명()
변수명.메소드명()

4. static 메소드
클래스명.메소드명()

● 이미지 경로
void imgadd(ActionEvent event) {
	private Stage stage; // 스테이지
	FileChooser fileChooser = new FileChooser(); // 1. 파일 선택 클래스
	// 2. 파일 선택 필터 설정
	fileChooser.getExtensionFilters().add(new ExtensionFilter
		("그림파일 : Image File",  "*png", "*jpg", "*gif"));
	File file = fileChooser.showOpenDialog(stage); // 3. 파일 선택을 해당 스테이지 열기 
	// 4. 파일 선택 된 경로를 file 클래스에 저장
		lblimgpath.setText("파일경로 : " + file.getParent()); // 5. 레이블에 경로 표시
		pimage=file.toURI().toString(); // 6. 실제(refresh) 경로 변수 저장
		Image image = new Image(pimage); // 7. 이미지 클래스에 경로설정
		pimg.setImage(image); // 8. 이미지 뷰에 이미지 경로 설정
		// pimg : 이미지 뷰
}
● URI, URL 차이점
URI : /
URL : \

● Login.fxml
	LoginController // 메인 로그인Fxml을 조종
로그인, 회원가입, 아이디 찾기, 비밀번호 찾기

● 파일구조
Mainpage(FindpasswordController) :
홈, (화면전환), 로그아웃, 회원정보, 게시판, 게시물, 제품목록, 채팅

SignUp
	SignUpController 
	
Findid.fxml
	FindpasswordController
	
Findid
	FindpasswordController

Home
myinfo(MyinfoController) : 수정(화면전환), 삭제(이벤트)
boardlist(BoardlistController) : 게시물 등록(loadpage), 테이블 클릭(이벤트)
Productlist(ProductlistController) : 제품등록, 제품출력(클릭이벤트), 수정(loadpage), 삭제(이벤트), 상태변경(이벤트)
채팅

myinfoupdate(MyinfoController) : 수정(성공시 화면 전환), 취소(화면전환)
Boardwrite(BoardwriteController) : 등록(성공시 loadpage), 취소(loadpage)
Boardview(BoardviewController) : 수정(이벤트), 삭제(이벤트), 댓글등록(이벤트), 댓글출력, 뒤로기기(loadpage)
productupdate(productupdateController) : 수정(성공시 loadpage), 취소(loadpage)

● DB구조
회원				게시물				댓글					제품
회원번호[PK, AI]	게시물 번호	[PK, AI]	댓글 번호[PK, AI]		제품 번호[PK, AI]
회원 아이디			게시물 제목				댓글 내용				제품명
회원 비밀번호		게시물 내용				댓글 작성자				제품 이미지
회원명			게시물 작성자			댓글 작성일				제품 설명
회원 이메일			게시물 작성일			게시물 번호[FK]			제품 카테고리
회원 포인트			게시물 조회수								제품 카테고리
														제품 가격
														제품 상태
														제품 등록 날짜
														제품 등록 회원 번호
--------------------------------------------------------------------------
				제품					주문목록(예)			주문상세(예)
				제품 번호[PK, AI]		주문번호				주문상세번호
				제품명				회원번호				주문번호
				제품 이미지				주문일자				제품번호
				제품 설명				주문상태
				제품 카테고리			주문금액
				제품 가격
				제품 상태
				제품 등록날짜
				제품 등록 회원번호
													
											
(게시물) 게시물 작성자 → (회원) 회원 아이디
(댓글) 게시물 번호 → (게시물) 게시물 번호
(제품) 제품 등록 회원 번호 → (회원) 주문번호
+) 주문목록(회원번호) → (회원)회원번호
(주문상세)제품번호 → (제품) 제품번호

● DB 함수[메소드]
now() : 시스템 날짜/시간
count() : 해당 필드의 레코드 수

계열 생성 : XYChart.Series 계열명 = new XYChart.Series<>();
계열 이름 : 계열명.setName("");
계열에 값 설정 : XYChart.Date("x축(가로)", "y축(세로)")
계열에 값 추가 : series.getData().add()
차트에 계열 추가 : 차트명.getData().add(계열);

1. 모든 레코드 검색 : select*from product
2. P_date 필드 기준으로 분해
select substring_index(product.p_date," ", 1) from product
substring_index(필드명, "분해기준", 가져올번호)
2021-11-08 13:40:35 → 2021-11-08 : 1 // 날짜
					  13:40:35 : 2 // 시간
3. 그룹[GROUP BY 필드명]
GROUP BY select substring_index(product.p_date," ", 1)
4. 그룹조건[having 그룹 안에서의 조건 ←-→ where 그룹 밖에서의 조건]
select substring_index(product.p_date,' ', 1),
		count(*)
from product
group by substring_index(product.p_date,' ', 1)
최대값 : upperBound="20" / 최소값 : lowerBound="-20"