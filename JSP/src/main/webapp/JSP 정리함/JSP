JSP 
2021. 11. 29.
	1. jsp : java server pages [ 자바 서버 페이지 ]
	2. 서블릿 : java web program class [ 자바 웹 프로그래밍 클래스 ]
	문제점 : java 와 html 연결 어렵다 -> 보완점 : jsp
	3. jsp : html파일내 java 작성 가능 [ html+java ]
	4. jsp 구동원리
		클라이언트가 jsp 요청하면
		1.html 반환	2. jsp 내 java코드 -> java파일[서블릿]로 변환 -> 실행
			** 클라이언트 들은 java파일 확인 불가능
	5. 태그 
		1. <%!  선언문 %> 	: 1. 변수선언[전역변수] 2.메소드선언 
		2. <%  스크립트문 %>  	: 1.변수선언[지역변수] 2. 실행코드
		3. <%= 표현식 %> 		: 1. html에 java 변수,메소드 호출
		4. <-- 주석 -->		: 주석처리
		<% //한줄 주석   /*여러주석*/	: 스크립트문에서 주석처리 	
	6. 서블릿 ★
		jsp → [jsp 컨테이너] → 서블릿으로 변환
			1. 선언문 → 필드(맴버변수)
			2. 스크립트문 → _jspService 메소드
	Jsp를 요청하면 서블릿으로 변환
	

form
action : "이동할 페이지 경로"
method : 전송방식
	post : 
	get : 
	
	
지시자
	1. page 지시자 : 페이지 속성
		1. <%@ page info="페이지속성내용">
		2. <%@ page language="스크립트에 사용할 언어"> : 스트립트에서 사용할 언어
		3. <%@ page contentType="text/html"> : 페이지 출력할 형식/문자타입
		4. <%@ page import="java.utll.*" %> : 패키지 혹은 클래스 불러오기
		5. <%@ page errorPage=""%> : 예외발생시 출력할 페이지 명
			예외 페이지에 <%@ page isErrorPage="true" %> : 해당 페이지 예외페이지 설정
			
	2. include 지시자 : 페이지 포함
		<%@ %> : 현재페이지에 페이지 포함
	
액션 태그
	1. <jsp:include page="페이지명"></jsp:include> : 현재페이지에 페이지 포함
	2. <jsp:forward page="페이지명"></jsp:forward> : 현재페이지에 페이지 이동
			<jsp:param value="데이터" name="변수명">
	3. 태그 다체 액션태그
		<%! %> : <jsp:declaration></declaration> // 선언문
		<% %> : <jsp:scriptlet></scriptlet>
		<%= %> : <jsp:expression></expression> // 표현식
	4. ★ 중요 자바빈즈[객체 통신 태그]
	
내장객체[미리 만들어진 객체]
	1. request : 변수를 포함한 요청을 닿는 객체
		0. request.setCharacterEncoding("UTF-8") : 요청문자 타입
		1. request.getParameter("변수명") : 해당 변수 요청[무조건 문자로 밖에 안됌]
		2.
	2. response : 요청에 대한 응답을 담고 있는 객체
		응답을 이미 가지고 있음
	3. out : 출력 스트림 객체
	4. sesstion : 세션정보를 담고 있는 객체
	5. page : jsp 서블릿 객체[서블릿 페이지 정보]
	6. exception : 예외
	
요청과 응답[request, response]


Post vs get[페이지(데이터) 요청 방식]
1. post
	1. url 요청된 변수가 표시 X
	2. 보안[로그인, 개인정보 등]
	3. 캐시사용 X [한번 사용 후 기록 X]
	4. 길이제한 X
	
2. get
	1. url 요청된 변수가 표시 O
	2. 보안 취약[제품명, 검색 등]
	3. 캐시사용 [한번 사용 후 기록] : 다음에 접속할 때 빠름
	4. 길이제한 O

사용처
	1. form(action="이동페이지경로" method="post.get")
	2. URL 변수 추가[get]
	3. 
		
	
세션 vs 쿠키
내장객체(http: 클래스의 객체
	1. 세션[내장객체 (httpSesstion 클래스의 객체)] - 서버에 저장
		서버 Pc에 테이터 저장[웹페이지 전반적으로 걸쳐 사용되는 변수] = 쿠키도 가능(사용자에게)
			1. 서버에 저장하다보니 보안(개인정보 등)
			2. 많은 세션 사용시 서버 부화(서버가 느려짐)
			3. 세션 유지 시간
			4. [서버 내 세션저장소] 부여된 세션으로 홈페이지 활동
			
		1. session.setAttribute("세션명", "데이터") : 세션 추가 // 집어 넣기
		2. session.getAttribute("세션명") : 세션 호출 // 빼오기
		3. session.invalidate() : 모든 세션 초기화
			. sesstion.setAttribute("세션명", null) : 해당 세션 초기화
		4. session.setMaxInactiveInterval(초) : 세션 유지 시간[초당]
			
	2. 쿠키 [Jsp X 내장객체]
		사용자[클라이언트] Pc에 데이터 저장[웹페이지 전반적으로 걸쳐 사용]
			1. 사용자 pc에 저장하다보니 보안 취약[장바구니 , 로그인 정보 등]
			2. 많은 쿠키를 사용시 서버 상관 X (컴퓨터, 인터넷이 느려짐)
			3. 브라우저 많아도 쿠키유지
		Cookie 쿠키 객체면 = new Cookie("쿠키명", 데이터); : 쿠키생성
		response.addCookie(쿠키객체명) : 클라이언트(브라우저) 쿠키저장
			쿠키객체명.setMaxAge(초) : 쿠카의 생명주기
			쿠키객체명.setValue : 쿠키 데이터 교환
			 : 모든 쿠키요청[호출]
			 
상대경로 vs 절대경로
	1. 절대경로
		localhost:8080 : 최상위 경로 ~~~
			/ 최상위 경로/폴더명/폴더명/파일명
	2. 상대경로
		현재 페이지 기준으로 
		/ : 최상경로
		../ : 상위경로
			../../ : 2번 위로 이동
		./ : 현재경로[생략가능]
		
2021. 12 .02
Js 정리
Js 쓰는 목적 : html, css : 정적기능 / js : 동적기능]
	1. js작성위치 : <body>안
	2. js 파일작성 후 호출 하는 방법은 <body> <script src="파일명.js"></script>
문법
	1. var 변수명 : 자료형 존재하지 않음
		var 변수명 ="안녕하세요" : 문자열
		var 변수명 = 30; : 정수열
		var 변수명=[30, 40, 50, 60] : 배열
	2. 반복문 → java와 동일
	3. 함수
		함수 정의시 : function 함수명(인수1, 인수2) : 인수는 자료형
		함수 호출 : <태그 이벤트 속성="함수명(인수1, 인수2);">
js html 접근방법
	1. document : 현재 문서[=html]에 태그 접근 가능
	2. document.getElementById["id 값을 줌"] : 문서[hrml] 내 id접근 가능
	3. document.getElementById["id"].textContent="택스트/변수" : 해당 id 내 <> 텍스트 넣기 <> // 태그 사이에 내용 추가 
	4. document.getElementById["id"].innerHTML="텍스트/변수" : 해당 id 내 HTML 추가
	5. document.getElementById["id"].style.속성명="값" : 해당 id에 cssstyle 적용
	6. document.태그명

정규표현식
/^ : 정규표현식 시작
$/ : 정규표현식 끝
[] : 문자 패턴
	[A-Z] : 대문자 A-Z만 가능(사용패턴)
	[a-z] : 소문자 a-z만 가능
	[0-9] : 숫자 0~9까지만 가능
	[가-힣] : 한글 모두사용 가능
{} : 문자 개수
	{최소길이, 최대길이}
	{5, 15} : 5~12길이만 가능
() : 문자 하나로 인식 // 하나의 문자열로 묶음
	[0|1|6|7|8|9] 중에 1개 → | : 이거나 
와일드 카드 :
	* : 앞에 문자 없거나 혹은 여러개(여러문자가) 존재
	? : 앞에 문자 있거나 혹은 하나가 있음[?당 문자 1개]
		? 대신에 - 도 가능

동기식 vs 비동기식
동기식 : 응답을 기다림
	페이지 전환[요청에 따른 응답 결과 O]
	1. form action="페이지경로"
비동기식 : 응답을 기다리지 않음
	★ 페이지 전환X[요청에 따른 결과 X] 실시간으로 처리 할때 사용★
	1. Ajax[jQuery]
		$Ajax({속성명 : 값, 속성명2 : 값2, 속성명3:값3})
			url : 통신할 페이지 경로 페이지 : 경로 파일명
			data : {이동할데이터} : 변수명:값
			success : function(result){} : 결과가져오기
				1. 통신결과는(result) 통신 한 페이지의 html을 가져옴
클라이언트		서버
	|
	------- →|
	|← ----- |
	|→ --- → |
	
설계[DB] : 게시판[공지사항]
	1. 게시물번호[PK, AUTO, INT]
	2. 제목[varchar]
	3. 내용[varchar]
	4. 회원번호[식별용 / 작성자] [FK, INT]
	5. 작성일[timestamp, default now]
	6. 첨부파일[varchar] : 실제파일은 서버에 저장 / 경로는 DB에 저장
	7. 조회수[INT]
	8. 게시물 상태[1. 표시 / 2. 숨기기] [INT]



1. SQL
create table jsp.board(
      b_num int primary key auto_increment , 
      b_title varchar(30) not null ,
      b_contents varchar(1000) not null ,
      m_num int not null ,
      b_date timestamp default now() ,
      b_file varchar(1000) ,
      b_view int default 0 ,
      b_activation int default 1 ,
      foreign key ( m_num ) references member( m_num )  
)
2. DTO 클래스

파일 업로드
1. cos.jar 라이브러리 이용[파일을 복사해주는 라이브러리]
1. form 인코딩 : enc
2. MultipartRequest 객체 = new MultipartRequest(1, 2, 3, 4, 5)
	1. 요청방식 : request
	2. 업로드 할 폴더 경로
	3. 용량 : 바이트 단위
	4. 인코딩 타입 : utf-8
	5. 보안 : new DefaultFileRenamePolicy()
			DefaultFileRenamePolicy : 파일명이 동일할경우 자동으로 파일명 뒤에 번호 매기기[파일명 중복 제거 클래스]
3. form 변수요청시[form의 인코딩 타입이 multipart일 경우 request 객체요청 사용불가]
	1. 객체명.getParameter() : 변수 값 요청
	2. getFilesystemName() : 첨부파일에 올라간 파일명 요청

워크스페이스 : 작업폴더[프로젝트/파일 작성하는 곳]
서버폴더 : 서버 실행시 작업 폴더에 있는 파일들을 서버로 이동
클라이서버	  	←→ 			폴더			←→		워크 스페이스[프로젝트 폴더]
사용자	 request →		요청, 응답				* Git (Project Exploer은 서버가 X)
		 respawn ←		개발자
		 
		 
Project Exploer은 서버가 아님


서버의 구동원리
	1. 프로젝트 실행 → 프로젝트 내 서블릿/프론트엔드 분리
	2. 서버폴더 패치
	3. 클라이언트 요청/응답에 따른 서버폴더 내 요청/응답

서버 경로 찾기[서블릿]
	1.  request.getSession().getServletContext().getRealPath("경로명/파일명");
파일 다운로드
	1. 파일명의 경로 찾기
	2. 해당파일 객체화[File file = new File(경로/파일명)] : 해당파일이 객체화[다양한 메소드 제공]
		// 해당 파일의 다양한 기능 : FileInputStream(file)
		1. 파일을 바이트형 변환[String]
	3. 다운로드 형식
		response.setHeader("Content-Disposition", "attachment;filename="+파일이름+";");	
	4. 전송방식
		1. 서바가 해당파일을 바이트 형으로 읽어온다
			BufferedInputStream 객체명 = new BufferedInputStream(new FileInputStream(파일객체))
			객체명.read(배열명)
		2. 서버가 읽어온 파일의 바이트를 클라이언트에게 응답[전송]
			BufferedOutputStream 객체명 = new BufferedOutputStream(response.getOutputStream());
			객체명.write(배열명)
		3. 스트림 초기화/종료
			스트림 객체.close()

페이징 처리
	limit : 검색개수를 제한
		limit(시작개수, 마지막개수)
1. lastrow : 총 게시물 수
2. listsize : 페이지 당 표시할 게시물 수
3. lastpage : 마지막 페이지 번호
	lastpage=lastrow/listsize
	나머지가 있을경우 +1
4. 
검색
key : 필드명
keyword : 필드명 내 검색 데이터		
동일한 값을 찾는 일반 검색
 select*from board where b_title = "12345"
 필드 내 포함된 값을 찾는 검색
 like : 비교연산자[필드명 like '%검색단어%']
 	? : 하나문자			% : 여러문자
동일한 값 검색 : select*from 테이블명 where 필드명 = 검색데이터
포함된 값 검색 : select*from 테이블 명 where 필드명 like '%검색데이터%'	
		
		
		
		
		
		
		
		
		
		
Html : 문서
Css : 스타일
Js : 동적 - if, for 함수를 쓸 수 있는 것
아이디 중복체크
	1. 회원가입 아이디 입력받는ㄷ
	2. controller 이동해서 db와 비교
	3. 회원가입 중복여부 띄우기
비동기식[페이지 이동없이 실시간처리 → DB]
	1. 페이지 이동 없이 데이터 통신
	동기 : 요청 - 다른 페이지 전한 후 처리
	비동기 : 요청하고 자기 할일 그대로 함 응답이 할때 
	JS → Jquery[Ajax : 비동기식 